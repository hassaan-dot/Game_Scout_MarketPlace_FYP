{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { toast } from \"react-toastify\";\nimport { api_dashboard } from \"../services/axios\";\nimport { useModalStore } from \"../store/useModalStore\";\nconst handleChatBot = async data => {\n  const res = await api_dashboard.post(\"/chatBot\", data);\n  return res.data;\n};\nconst handleGetData = async index => {\n  const res = await api_dashboard.post(`/data/${index}`);\n  return res.data;\n};\n\n// export const useGetData = (index) => {\n//   return useQuery({\n//     queryKey: [\"data\"],\n//     queryFn: () => handleGetData(),\n//   });\n// };\nexport const useGetData = () => {\n  _s();\n  const {\n    setAiResponse,\n    setallData\n  } = useModalStore();\n  const notify = message => toast(message);\n  return useMutation({\n    mutationKey: [\"GetData\"],\n    mutationFn: index => handleGetData(index),\n    onSuccess: async data => {\n      setallData(data);\n    },\n    onError: error => {\n      var _error$response, _error$response$data;\n      notify(error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message);\n    }\n  });\n};\n_s(useGetData, \"XVIM2zIwkKGlFZSlA7t1U9zPhNg=\", false, function () {\n  return [useModalStore, useMutation];\n});\nexport const useChatBot = () => {\n  _s2();\n  const {\n    setAiResponse\n  } = useModalStore();\n  const notify = message => toast(message);\n  return useMutation({\n    mutationKey: [\"chatBot\"],\n    mutationFn: data => handleChatBot(data),\n    onSuccess: async data => {\n      setAiResponse(data === null || data === void 0 ? void 0 : data.reply);\n    },\n    onError: error => {\n      var _error$response2, _error$response2$data;\n      notify(error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message);\n    }\n  });\n};\n_s2(useChatBot, \"69R7QV7O1ia7Vxqfrvi0mRFe7pQ=\", false, function () {\n  return [useModalStore, useMutation];\n});","map":{"version":3,"names":["useMutation","useQuery","toast","api_dashboard","useModalStore","handleChatBot","data","res","post","handleGetData","index","useGetData","_s","setAiResponse","setallData","notify","message","mutationKey","mutationFn","onSuccess","onError","error","_error$response","_error$response$data","response","useChatBot","_s2","reply","_error$response2","_error$response2$data"],"sources":["D:/New folder/Game_Scout_MarketPlace_FYP/src/hooks/useDashboard.js"],"sourcesContent":["import { useMutation, useQuery } from \"@tanstack/react-query\";\r\nimport { toast } from \"react-toastify\";\r\nimport { api_dashboard } from \"../services/axios\";\r\nimport { useModalStore } from \"../store/useModalStore\";\r\n\r\nconst handleChatBot = async (data) => {\r\n  const res = await api_dashboard.post(\"/chatBot\", data);\r\n  return res.data;\r\n};\r\nconst handleGetData = async (index) => {\r\n  const res = await api_dashboard.post(`/data/${index}`);\r\n  return res.data;\r\n};\r\n\r\n// export const useGetData = (index) => {\r\n//   return useQuery({\r\n//     queryKey: [\"data\"],\r\n//     queryFn: () => handleGetData(),\r\n//   });\r\n// };\r\nexport const useGetData = () => {\r\n  const { setAiResponse, setallData } = useModalStore();\r\n  const notify = (message) => toast(message);\r\n  return useMutation({\r\n    mutationKey: [\"GetData\"],\r\n    mutationFn: (index) => handleGetData(index),\r\n    onSuccess: async (data) => {\r\n      setallData(data);\r\n    },\r\n    onError: (error) => {\r\n      notify(error?.response?.data?.message);\r\n    },\r\n  });\r\n};\r\nexport const useChatBot = () => {\r\n  const { setAiResponse } = useModalStore();\r\n  const notify = (message) => toast(message);\r\n  return useMutation({\r\n    mutationKey: [\"chatBot\"],\r\n    mutationFn: (data) => handleChatBot(data),\r\n    onSuccess: async (data) => {\r\n      setAiResponse(data?.reply);\r\n    },\r\n    onError: (error) => {\r\n      notify(error?.response?.data?.message);\r\n    },\r\n  });\r\n};\r\n"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,uBAAuB;AAC7D,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,aAAa,QAAQ,mBAAmB;AACjD,SAASC,aAAa,QAAQ,wBAAwB;AAEtD,MAAMC,aAAa,GAAG,MAAOC,IAAI,IAAK;EACpC,MAAMC,GAAG,GAAG,MAAMJ,aAAa,CAACK,IAAI,CAAC,UAAU,EAAEF,IAAI,CAAC;EACtD,OAAOC,GAAG,CAACD,IAAI;AACjB,CAAC;AACD,MAAMG,aAAa,GAAG,MAAOC,KAAK,IAAK;EACrC,MAAMH,GAAG,GAAG,MAAMJ,aAAa,CAACK,IAAI,CAAC,SAASE,KAAK,EAAE,CAAC;EACtD,OAAOH,GAAG,CAACD,IAAI;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM;IAAEC,aAAa;IAAEC;EAAW,CAAC,GAAGV,aAAa,CAAC,CAAC;EACrD,MAAMW,MAAM,GAAIC,OAAO,IAAKd,KAAK,CAACc,OAAO,CAAC;EAC1C,OAAOhB,WAAW,CAAC;IACjBiB,WAAW,EAAE,CAAC,SAAS,CAAC;IACxBC,UAAU,EAAGR,KAAK,IAAKD,aAAa,CAACC,KAAK,CAAC;IAC3CS,SAAS,EAAE,MAAOb,IAAI,IAAK;MACzBQ,UAAU,CAACR,IAAI,CAAC;IAClB,CAAC;IACDc,OAAO,EAAGC,KAAK,IAAK;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MAClBR,MAAM,CAACM,KAAK,aAALA,KAAK,wBAAAC,eAAA,GAALD,KAAK,CAAEG,QAAQ,cAAAF,eAAA,wBAAAC,oBAAA,GAAfD,eAAA,CAAiBhB,IAAI,cAAAiB,oBAAA,uBAArBA,oBAAA,CAAuBP,OAAO,CAAC;IACxC;EACF,CAAC,CAAC;AACJ,CAAC;AAACJ,EAAA,CAbWD,UAAU;EAAA,QACiBP,aAAa,EAE5CJ,WAAW;AAAA;AAWpB,OAAO,MAAMyB,UAAU,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC9B,MAAM;IAAEb;EAAc,CAAC,GAAGT,aAAa,CAAC,CAAC;EACzC,MAAMW,MAAM,GAAIC,OAAO,IAAKd,KAAK,CAACc,OAAO,CAAC;EAC1C,OAAOhB,WAAW,CAAC;IACjBiB,WAAW,EAAE,CAAC,SAAS,CAAC;IACxBC,UAAU,EAAGZ,IAAI,IAAKD,aAAa,CAACC,IAAI,CAAC;IACzCa,SAAS,EAAE,MAAOb,IAAI,IAAK;MACzBO,aAAa,CAACP,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEqB,KAAK,CAAC;IAC5B,CAAC;IACDP,OAAO,EAAGC,KAAK,IAAK;MAAA,IAAAO,gBAAA,EAAAC,qBAAA;MAClBd,MAAM,CAACM,KAAK,aAALA,KAAK,wBAAAO,gBAAA,GAALP,KAAK,CAAEG,QAAQ,cAAAI,gBAAA,wBAAAC,qBAAA,GAAfD,gBAAA,CAAiBtB,IAAI,cAAAuB,qBAAA,uBAArBA,qBAAA,CAAuBb,OAAO,CAAC;IACxC;EACF,CAAC,CAAC;AACJ,CAAC;AAACU,GAAA,CAbWD,UAAU;EAAA,QACKrB,aAAa,EAEhCJ,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}